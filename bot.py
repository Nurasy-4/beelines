import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

API_TOKEN = '7823391741:AAHJ5C-6FfQUYlmWX-cosVzI7-dEBwfk_Ag'
ADMIN_ID = 8034258045

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_gb_selection = {}
payment_approved = {}
gb_confirmed = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî¢ –ì–ë –µ—Å–µ–ø—Ç–µ—É")],
        [KeyboardButton(text="üì≤ –ù”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True)]
    ],
    resize_keyboard=True
)

gb_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üü© 1 –ì–ë"), KeyboardButton(text="üü© 2 –ì–ë")],
        [KeyboardButton(text="üü© 3 –ì–ë"), KeyboardButton(text="üü© 4 –ì–ë")],
        [KeyboardButton(text="üü© 5 –ì–ë"), KeyboardButton(text="üü© 6 –ì–ë")],
        [KeyboardButton(text="üü© 7 –ì–ë"), KeyboardButton(text="üü© 8 –ì–ë")],
        [KeyboardButton(text="üü© 9 –ì–ë"), KeyboardButton(text="üü© 10 –ì–ë")],
    ],
    resize_keyboard=True
)

payment_done_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∞ –∂–∞—Å–∞–¥—ã–º")]
    ],
    resize_keyboard=True
)

payment_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì≤ –ù”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä—É", request_contact=True)],
        [KeyboardButton(text="‚úç “ö–æ–ª–º–µ–Ω –Ω”©–º—ñ—Ä –µ–Ω–≥—ñ–∑—É")]
    ],
    resize_keyboard=True
)

restart_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É")]
    ],
    resize_keyboard=True
)

def get_gb_confirm_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –ì–ë —Ç“Ø—Å—Ç—ñ")]],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.reply("–°”ô–ª–µ–º! “ö–∞–Ω—à–∞ –ì–ë –∫–µ—Ä–µ–∫—Ç—ñ–≥—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑!", reply_markup=gb_keyboard)

@dp.message(F.text.startswith("üü©"))
async def calculate_price(message: types.Message):
    try:
        gb_amount = int(message.text.split(" ")[1].replace("–ì–ë", ""))
        price = gb_amount * 110
        user_gb_selection[message.from_user.id] = gb_amount
        await message.reply(
            f"{gb_amount} –ì–ë = {price} ‚Ç∏.\n\n‚úÖ –¢”©–ª–µ—É —Ä–µ–∫–≤–∏–∑–∏—Ç—Ç–µ—Ä—ñ: 8 705 213 51 07\n–ê—Ç—ã: –ê–ª–µ—É—Ö–∞–Ω –ù“±—Ä–∞—Å—ã–ª\n\n–ï–≥–µ—Ä —Ç”©–ª–µ–º –∂–∞—Å–∞—Å–∞“£—ã–∑, '–û–ø–ª–∞—Ç–∞ –∂–∞—Å–∞–¥—ã–º' –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑.",
            reply_markup=payment_done_keyboard
        )
    except ValueError:
        await message.reply("“ö–∞—Ç–µ! –î“±—Ä—ã—Å –ì–ë –º”©–ª—à–µ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑.")

@dp.message(F.text == "‚úÖ –û–ø–ª–∞—Ç–∞ –∂–∞—Å–∞–¥—ã–º")
async def payment_confirmation(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(
        ADMIN_ID,
        f"üìå “ö–æ–ª–¥–∞–Ω—É—à—ã @{message.from_user.username} ({message.from_user.full_name}) —Ç”©–ª–µ–º –∂–∞—Å–∞–¥—ã. –†–∞—Å—Ç–∞–π—Å—ã–∑ –±–∞?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –†–∞—Å—Ç–∞—É", callback_data=f"approve_{user_id}")]]
        )
    )
    await message.reply("‚úÖ –¢”©–ª–µ–º—ñ“£—ñ–∑ —Ç–µ–∫—Å–µ—Ä—ñ–ª—É–¥–µ.")

@dp.callback_query(F.data.startswith("approve_"))
async def approve_payment(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    payment_approved[user_id] = True
    await bot.send_message(user_id, "‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –ù”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –±”©–ª—ñ—Å–µ –∞–ª–∞—Å—ã–∑.", reply_markup=payment_keyboard)
    await callback.answer("–¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã!")

@dp.message(F.text == "‚úç “ö–æ–ª–º–µ–Ω –Ω”©–º—ñ—Ä –µ–Ω–≥—ñ–∑—É")
async def request_manual_phone(message: types.Message):
    await message.reply("üìû –ù”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: +77051234567 –Ω–µ–º–µ—Å–µ 87051234567):")

@dp.message(F.contact)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    if not payment_approved.get(user_id, False):
        await message.reply("‚ö†Ô∏è –¢”©–ª–µ–º ”ô–ª—ñ —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω –∂–æ“õ!")
        return
    contact = message.contact.phone_number
    await process_phone_number(message, contact)

@dp.message(F.text.regexp(r"^(\+7|8)\d{10}$"))  # +7 + 10 —Ü–∏—Ñ—Ä –∏–ª–∏ 8 + 10 —Ü–∏—Ñ—Ä

async def handle_manual_phone(message: types.Message):
    user_id = message.from_user.id
    if not payment_approved.get(user_id, False):
        await message.reply("‚ö†Ô∏è –¢”©–ª–µ–º ”ô–ª—ñ —Ä–∞—Å—Ç–∞–ª“ì–∞–Ω –∂–æ“õ!")
        return
    await process_phone_number(message, message.text)

async def process_phone_number(message: types.Message, phone_number: str):
    user_id = message.from_user.id
    gb_amount = user_gb_selection.get(user_id, "–±–µ–ª–≥—ñ—Å—ñ–∑")
    gb_confirmed[user_id] = False
    await message.reply(
        f"‚úÖ –ù”©–º—ñ—Ä—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã: {phone_number}\n–ñ–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –ì–ë —Ç“Ø—Å–µ—Ç—ñ–Ω –±–æ–ª–∞–¥—ã!\n–¢“Æ–°–ö–ï–ù–ù–ï–ù –ö–ï–ô–Ü–ù  üëâ–ì–ë –¢“Æ–°–¢–Üüëà –ë–ê–¢–´–†–ú–ê–°–´–ù –ë–ê–°–´“¢–´–ó", 
        reply_markup=get_gb_confirm_keyboard()
    )
    await bot.send_message(
        ADMIN_ID,
        f"üÜï –ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å!\nüë§ “ö–æ–ª–¥–∞–Ω—É—à—ã: @{message.from_user.username}\nüîë Telegram ID: {user_id}\nüìû –ù”©–º—ñ—Ä: {phone_number}\nüì¶ –¢—Ä–∞—Ñ–∏–∫: {gb_amount} –ì–ë\nüü¢ –°—Ç–∞—Ç—É—Å: –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã"
    )

@dp.message(F.text == "‚úÖ –ì–ë —Ç“Ø—Å—Ç—ñ")
async def confirm_gb_sent(message: types.Message):
    user_id = message.from_user.id
    if user_id in gb_confirmed and not gb_confirmed[user_id]:
        gb_confirmed[user_id] = True
        await message.reply("‚úÖ –ì–ë —Å”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!", reply_markup=restart_keyboard)
        await bot.send_message(ADMIN_ID, f"‚úÖ –ì–ë “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: @{message.from_user.username}")

@dp.message(F.text == "üîÑ “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É")
async def restart_order(message: types.Message):
    await message.reply("üîÑ –ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å –∂–∞—Å–∞—É “Ø—à—ñ–Ω –ì–ë –º”©–ª—à–µ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑!", reply_markup=gb_keyboard)

@dp.message()
async def handle_invalid_input(message: types.Message):
    if message.text:
        await message.reply("‚ùå “ö–∞—Ç–µ! –î“±—Ä—ã—Å –Ω”©–º—ñ—Ä –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: +77051234567 –Ω–µ–º–µ—Å–µ 87051234567).")

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())